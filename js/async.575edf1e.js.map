{"version":3,"sources":["webpack:///./src/modules/async/index.vue","webpack:///src/modules/async/index.vue","webpack:///./src/modules/async/index.vue?4041","webpack:///./src/modules/async/index.vue?3a68"],"names":["_c","_self","staticClass","directives","name","value","expression","attrs","domProps","target","_vm","on","staticRenderFns","data","msg","methods","asyncFn","arg","callback","console","log","setTimeout","print","args","join","reset","handleClick","serialFn","that","results","_handler","result","push","_series","shift","item","length","parallelFn","forEach","serialAndParallel","running","max","_launcher","component"],"mappings":"8HAA4CA,EAAOC,WAAS,MAAU,KAAOC,UAAY,GAAM,OAAM,QAAS,CAAgJC,YAAY,Q,CAACC,OAAK,GAAO,wI,WAAS,EAAUC,KAAK,QAAWC,kBAAkB,YAACJ,WAAY,Q,YAAoC,e,YAAgB,CAAsB,aAACK,OAAM,uB,MAAa,CAAc,UAAqB,YAACC,YAAS,QAAkB,SAAC,CAAG,MAAC,O,GAA0B,C,MAAyC,SAAQC,GAAY,qBAAC,0BAA2D,EAAC,2B,YAAS,O,GAAiBC,CAA6B,kBAAC,6BAAoDC,CAAE,EAAC,uB,YAAS,O,GAAiBD,CAA0B,kBAAC,0BAAsDC,CAAE,EAAC,yB,YAAS,O,GAAiBD,CAA4B,kBAAC,4BAAsDC,CAAE,EAAC,yB,YAAS,O,GAAiBD,CAAmC,kBAAC,mCAEthCE,qBAAoB,M,KCyCT,G,UAAA,CACfC,OACA,OACAC,IAAA,KAIAC,QAAA,CACAC,QAAAC,EAAAC,GACA,KAAAJ,KAAA,aAAAG,EAAA,KACAE,QAAAC,IAAA,aAAAH,GACAI,WAAA,KACAH,EAAA,EAAAD,IACA,MAIAK,SAAAC,GACAJ,QAAAC,OAAAG,GACA,KAAAT,KAAAS,EAAAC,KAAA,WAGAC,QACA,KAAAX,IAAA,IAGAY,cACA,KAAAV,QAAA,OACA,KAAAA,QAAA,OACA,KAAAA,QAAA,QACA,KAAAA,QAAA,QACA,KAAAA,QAAA,QACA,KAAAA,QAAA,GAAAC,IACA,KAAAK,MAAAL,gBASAU,WACA,MAAAC,EAAA,KAEA,IAAAL,EAAA,cAEAM,EAAA,GAEA,SAAAC,EAAAC,GACAF,EAAAG,KAAAD,GACAE,EAAAV,EAAAW,SAGA,SAAAD,EAAAE,GACA,GAAAA,EACA,OAAAP,EAAAZ,QAAAmB,EAAAL,GAEAF,EAAAN,MAAA,QAAAO,IAAAO,OAAA,WAAAP,GAIAI,EAAAV,EAAAW,UAIAG,aAEA,IAAAd,EAAA,cAEAM,EAAA,GAGAN,EAAAe,QAAAH,IACA,KAAAnB,QAAAmB,EAAAJ,IACAF,EAAAG,KAAAD,GACAR,EAAAa,SAAAP,EAAAO,QACA,KAAAd,MAAA,QAAAO,IAAAO,OAAA,WAAAP,QAOAU,oBACA,MAAAX,EAAA,KACA,IAAAL,EAAA,cACAM,EAAA,GACAW,EAAA,EACAC,EAAA,EACA,SAAAC,IACA,MAAAF,EAAAC,GAAAlB,EAAAa,OAAA,GACA,MAAAD,EAAAZ,EAAAW,QACAN,EAAAZ,QAAAmB,EAAAJ,IACAZ,QAAAC,IAAA,aAAAe,EAAA,MAAAJ,EAAA,UAAAS,GACAX,EAAAG,KAAAD,GACAS,GAAA,EACAjB,EAAAa,OAAA,EACAM,IACA,IAAAF,GACAZ,EAAAN,MAAA,QAAAO,IAAAO,OAAA,WAAAP,KAGAW,GAAA,GAIAE,QCtJ2X,I,YCOvXC,EAAY,eACd,EACA,EACA/B,GACA,EACA,KACA,KACA,MAIa,aAAA+B,E","file":"js/async.575edf1e.js","sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"pa-4\"},[_c('h1',[_vm._v(\"Async\")]),_c('p',[_vm._v(\"如果有六个异步任务，需要全部完成后，才能执行最后的print函数。请问应该如何安排操作流程？\")]),_c('p',[_vm._v(\"如何确定异步操作执行的顺序，以及如何保证遵守这种顺序\")]),_c('textarea',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.msg),expression:\"msg\"}],staticClass:\"rounded pa-2\",staticStyle:{\"width\":\"100%\",\"border\":\"1px solid lightblue\"},attrs:{\"rows\":\"10\",\"readonly\":\"\",\"placeholder\":\"输出结果\"},domProps:{\"value\":(_vm.msg)},on:{\"input\":function($event){if($event.target.composing)return;_vm.msg=$event.target.value}}}),_vm._v(\" \"),_c('div',[_c('v-btn',{staticClass:\"mr-2\",on:{\"click\":function($event){_vm.reset(),_vm.handleClick()}}},[_vm._v(\" 按钮 \")]),_c('v-btn',{staticClass:\"mr-2\",on:{\"click\":function($event){_vm.reset(),_vm.serialFn()}}},[_vm._v(\" 串行函数 \")]),_c('v-btn',{staticClass:\"mr-2\",on:{\"click\":function($event){_vm.reset(),_vm.parallelFn()}}},[_vm._v(\" 并行函数 \")]),_c('v-btn',{staticClass:\"mr-2\",on:{\"click\":function($event){_vm.reset(),_vm.serialAndParallel()}}},[_vm._v(\" 串行并行结合 \")])],1)])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div class=\"pa-4\">\r\n    <h1>Async</h1>\r\n    <p>如果有六个异步任务，需要全部完成后，才能执行最后的print函数。请问应该如何安排操作流程？</p>\r\n    <p>如何确定异步操作执行的顺序，以及如何保证遵守这种顺序</p>\r\n    <textarea\r\n      v-model=\"msg\"\r\n      rows=\"10\"\r\n      readonly\r\n      placeholder=\"输出结果\"\r\n      class=\"rounded pa-2\"\r\n      style=\"width: 100%;border: 1px solid lightblue;\"\r\n    />\r\n    <div>\r\n      <v-btn\r\n        class=\"mr-2\"\r\n        @click=\"reset(),handleClick()\"\r\n      >\r\n        按钮\r\n      </v-btn>\r\n      <v-btn\r\n        class=\"mr-2\"\r\n        @click=\"reset(),serialFn()\"\r\n      >\r\n        串行函数\r\n      </v-btn>\r\n      <v-btn\r\n        class=\"mr-2\"\r\n        @click=\"reset(),parallelFn()\"\r\n      >\r\n        并行函数\r\n      </v-btn>\r\n      <v-btn\r\n        class=\"mr-2\"\r\n        @click=\"reset(),serialAndParallel()\"\r\n      >\r\n        串行并行结合\r\n      </v-btn>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      msg: '',\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    asyncFn(arg, callback) {\r\n      this.msg += '执行中... 参数:' + arg + '\\n';\r\n      console.log('执行中... 参数:', arg);\r\n      setTimeout(() => {\r\n        callback(arg * 2);\r\n      }, 500)\r\n    },\r\n\r\n    // 解构打印\r\n    print(...args) {\r\n      console.log(...args);\r\n      this.msg += args.join(' ')+ '\\n';\r\n    },\r\n\r\n    reset() {\r\n      this.msg = '';\r\n    },\r\n\r\n    handleClick() {\r\n      this.asyncFn(2, () => {\r\n        this.asyncFn(4, () => {\r\n          this.asyncFn(23, () => {\r\n            this.asyncFn(12, () => {\r\n              this.asyncFn(34, () => {\r\n                this.asyncFn(64, (arg) => {\r\n                  this.print(arg);\r\n                });\r\n              });\r\n            });\r\n          });\r\n        });\r\n      });\r\n    },\r\n\r\n    serialFn() {\r\n      const that = this;\r\n      // 定义参数序列\r\n      let args = [1, 2, 3, 4, 5, 6];\r\n      // 定义结果序列\r\n      let results = [];\r\n      // 结果处理函数\r\n      function _handler(result) {\r\n        results.push(result);\r\n        _series(args.shift());\r\n      }\r\n      // 串行函数\r\n      function _series(item) {\r\n        if(item) {\r\n          return that.asyncFn(item, _handler);\r\n        } else {\r\n          that.print('最终结果:', results[results.length - 1], '结果序列:', results);\r\n        }\r\n      }\r\n\r\n      _series(args.shift());\r\n    },\r\n\r\n    // 并行执行的效率较高，比起串行执行一次只能执行一个任务，较为节约时间。但是问题在于如果并行的任务较多，很容易耗尽系统资源，拖慢运行速度。\r\n    parallelFn() {\r\n      // 定义参数序列\r\n      let args = [1, 2, 3, 4, 5, 6];\r\n      // 定义结果序列\r\n      let results = [];\r\n\r\n      // 并行函数\r\n      args.forEach(item => {\r\n        this.asyncFn(item, (result) => {\r\n          results.push(result);\r\n          if(args.length === results.length) {\r\n            this.print('最终结果:', results[results.length - 1], '结果序列:', results);\r\n          }\r\n        })\r\n      })\r\n    },\r\n\r\n    // 限制并行执行的数量，防止系统资源耗尽\r\n    serialAndParallel() {\r\n      const that = this;\r\n      let args = [1, 2, 3, 4, 5, 6];\r\n      let results = [];\r\n      let running = 0;\r\n      let max = 2; // 调整这个参数可以控制并行执行的数量，以优化系统资源\r\n      function _launcher() {\r\n        while (running < max && args.length > 0) {\r\n          const item = args.shift();\r\n          that.asyncFn(item, (result) => {\r\n            console.log('并行执行完了 参数:', item, '结果:', result, '并行执行数量:', running);\r\n            results.push(result);\r\n            running-=1;\r\n            if(args.length > 0) {\r\n              _launcher();\r\n            } else if(running === 0) {\r\n              that.print('最终结果:', results[results.length - 1], '结果序列:', results);\r\n            }\r\n          })\r\n          running+=1;\r\n        }\r\n      }\r\n\r\n      _launcher();\r\n    },\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>","import mod from \"-!../../../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../../../node_modules/thread-loader/dist/cjs.js!../../../../../node_modules/babel-loader/lib/index.js!../../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../../../node_modules/thread-loader/dist/cjs.js!../../../../../node_modules/babel-loader/lib/index.js!../../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./index.vue?vue&type=template&id=025345b4\"\nimport script from \"./index.vue?vue&type=script&lang=js\"\nexport * from \"./index.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}